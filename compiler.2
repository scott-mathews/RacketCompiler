#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 158 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 211 72 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 150 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 4096 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 13 #"racket/fixnum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"interp.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"utilities.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; This exports r0-passes, defined below, to users of this file."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 9 #"r0-passes"
0 0 24 3 1 #" "
0 0 14 3 9 #"r1-passes"
0 0 24 3 1 #" "
0 0 14 3 13 #"pe-arith-pass"
0 0 24 3 1 #" "
0 0 14 3 13 #"uniquify-pass"
0 0 24 3 1 #" "
0 0 14 3 12 #"flatten-pass"
0 0 24 3 1 #" "
0 0 14 3 24 #"select-instructions-pass"
0 0 24 3 1 #" "
0 0 14 3 17 #"assign-homes-pass"
0 0 24 3 1 #" "
0 0 14 3 23 #"patch-instructions-pass"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";; The following pass is just a silly pass that doesn't change anyth"
 #"ing important,"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";; but is nevertheless an example of a pass. It flips the arguments "
 #"of +. -Jeremy"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flipper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 7 #"fixnum?"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"read"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"read"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"flipper"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"flipper"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"flipper"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"flipper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;; === Partial Evaluator === ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pe-neg2"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [ "
0 0 14 3 1 #"n"
0 0 24 3 9 #"         "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 23 #")                     ("
0 0 14 3 3 #"fx-"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")] "
0 0 17 3 13 #"; int -> -int"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"pe-neg2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"pe-neg2"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #"))] "
0 0 17 3 30 #"; (+ int int) -> (+ -int -int)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 21 #")                    "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"pe-neg2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 4 #"))] "
0 0 17 3 33 #"; (+ int exp) -> (+ -int (- exp))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 23 #")                     ("
0 0 14 3 7 #"pe-neg2"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))] "
0 0 17 3 32 #"; (+ exp int) -> (+ -int (-exp))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"e"
0 0 24 3 48 #"                                                "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 5 #")])) "
0 0 17 3 16 #"; exp -> (- exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pe-add2"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"match*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [( "
0 0 14 3 1 #"n"
0 0 24 3 12 #"            "
0 0 14 3 1 #"m"
0 0 24 3 12 #")           "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 5 #"))  ("
0 0 14 3 3 #"fx+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")] "
0 0 17 3 16 #"; int int -> int"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [( "
0 0 14 3 1 #"n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 5 #"))   "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"fx+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 3 #")] "
0 0 17 3 32 #"; int (+ int exp) -> (+ int exp)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 5 #")    "
0 0 14 3 1 #"n"
0 0 24 3 12 #")           "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 3 #"fx+"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 3 #")] "
0 0 17 3 32 #"; (+ int exp) int -> (+ int exp)"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [( "
0 0 14 3 1 #"n"
0 0 24 3 11 #"           "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"ra"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"rb"
0 0 24 3 3 #")) "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 22 #")                    ("
0 0 14 3 7 #"pe-add2"
0 0 24 3 2 #" ("
0 0 14 3 7 #"pe-add2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 2 #"ra"
0 0 24 3 2 #") "
0 0 14 3 2 #"rb"
0 0 24 3 3 #")] "
0 0 17 3 52 #"; int (+ exp exp) -> (pe-add2 (pe-add2 int exp) exp)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"la"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"ra"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"rb"
0 0 24 3 40 #"))                                      "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"pe-add2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ra"
0 0 24 3 1 #" "
0 0 14 3 2 #"la"
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 7 #"pe-add2"
0 0 24 3 1 #" "
0 0 14 3 2 #"rb"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 4 #"))] "
0 0 17 3 68
#"; (+ exp exp) (+ exp exp) -> (+ (pe-add2 exp exp) (pe-add2 exp exp))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [( "
0 0 14 3 1 #"a"
0 0 24 3 12 #"            "
0 0 14 3 1 #"b"
0 0 24 3 12 #")           "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 22 #")                    ("
0 0 14 3 7 #"pe-add2"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #")] "
0 0 17 3 30 #"; exp int -> (pe-add2 int exp)"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [( "
0 0 14 3 1 #"a"
0 0 24 3 12 #"            "
0 0 14 3 1 #"b"
0 0 24 3 49 #")                                                "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"b"
0 0 24 3 5 #")])) "
0 0 17 3 24 #"; exp exp -> (+ exp exp)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 7 #"fixnum?"
0 0 24 3 5 #")    "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 5 #")    "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"read"
0 0 24 3 8 #")       "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"read"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 9 #")       ("
0 0 14 3 7 #"pe-neg2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e2"
0 0 24 3 5 #")   ("
0 0 14 3 7 #"pe-add2"
0 0 24 3 2 #" ("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 3 #"]) "
0 0 28 3 1 #","
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")]) "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;; === Uniquify === ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 1 #"n"
0 0 24 3 3 #"   "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 3 #"]) "
0 0 28 3 1 #","
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"gensym"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 14 3 5 #"alist"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 2 #"(("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 4 #")]) "
0 0 28 3 1 #","
0 0 24 3 2 #"(("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 4 #"body"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 2 #"(("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"es"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 2 #") "
0 0 14 3 2 #"es"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;; ==== Flatten === ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Helpers ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; Get variable from list, or generate a temporary one"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 6 #"gensym"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 14 3 3 #"tmp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; If args is empty, call f on just arg. Otherwise call f on the car "
 #"of args."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"pass-optional1"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; Check if an expression is a terminal one"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"terminal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"read"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;; Flatten Itself ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flat-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"assignments"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 11 #"assignments"
0 0 24 3 2 #" ("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"flat-exp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"read"
0 0 24 3 3 #") ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"read"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 58
#"                                                         ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flat-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"assignments"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"( "
0 0 28 3 2 #",@"
0 0 14 3 11 #"assignments"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"flat-exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 14 #"pass-optional1"
0 0 24 3 1 #" "
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"var"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"e2"
0 0 24 3 3 #") ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flat-exp1"
0 0 24 3 1 #" "
0 0 14 3 12 #"assignments1"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars1"
0 0 24 3 3 #") ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flat-exp2"
0 0 24 3 1 #" "
0 0 14 3 12 #"assignments2"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 2 #",@"
0 0 14 3 12 #"assignments1"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 12 #"assignments2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"flat-exp1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"flat-exp2"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars1"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"genvar"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flat-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"assignments"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"( "
0 0 28 3 2 #",@"
0 0 14 3 11 #"assignments"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"flat-exp"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"t"
0 0 24 3 3 #"]) "
0 0 28 3 1 #","
0 0 14 3 4 #"body"
0 0 24 3 2 #") "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 9 #"terminal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flat-exp2"
0 0 24 3 1 #" "
0 0 14 3 12 #"assignments2"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 9 #"terminal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"pass-optional1"
0 0 24 3 1 #" "
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 9 #"flat-exp2"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"t"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 12 #"assignments2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 9 #"set->list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"e"
0 0 24 3 3 #"]) "
0 0 28 3 1 #","
0 0 14 3 4 #"body"
0 0 24 3 3 #") ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flat-exp1"
0 0 24 3 1 #" "
0 0 14 3 12 #"assignments1"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 13 #"define-values"
0 0 24 3 2 #" ("
0 0 14 3 9 #"flat-exp2"
0 0 24 3 1 #" "
0 0 14 3 12 #"assignments2"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 24 3 3 #") ("
0 0 14 3 14 #"flatten-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 6 #"values"
0 0 24 3 1 #" "
0 0 14 3 9 #"flat-exp2"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                    "
0 0 21 3 1 #"`"
0 0 24 3 2 #"( "
0 0 28 3 2 #",@"
0 0 14 3 12 #"assignments1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"flat-exp1"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 12 #"assignments2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 9 #"set->list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list->set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars1"
0 0 24 3 1 #" "
0 0 14 3 5 #"vars2"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;; === Select Instructions === ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Helpers ;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 103
(
 #"; Map a procedure which returns multiple values over a list, and ret"
 #"urn the result in a non-nested list"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"map-me"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 13 #"map-me-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"map-me"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"map-me-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; Select Instructions Itself ;;;"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";; TODO: write tests for select-instructions, return values properly"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"lhs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"read"
0 0 24 3 48 #"))                                             ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"callq"
0 0 24 3 1 #" "
0 0 14 3 8 #"read_int"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"rax"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 3 #"lhs"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 11 #")          "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 25 #")                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 9 #")        "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 5 #"))   "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 9 #")        "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 6 #"))   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 8 #"))      "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 25 #")                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 6 #"))    "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 6 #"))    "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 19 #"))                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 3 #")) "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 6 #"))   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #")) "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 17 #"))              ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #")) "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 7 #"))    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fixnum?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 7 #"))    ("
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 2 #"))"
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 5 #"))  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 2 #"))"
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 5 #"))  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 2 #"))"
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 2 #")("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 5 #"))  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 2 #"))"
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v3"
0 0 24 3 19 #"))                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v3"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 77
(
 #"                                                                    "
 #"         "
) 0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 14 #")             "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 25 #")                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"rax"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 28 3 1 #","
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 6 #"instrs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 32 #")                               "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"map-me"
0 0 24 3 1 #" "
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 14 3 6 #"instrs"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"alloc-size"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 5 #"))]) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 6 #"))))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-homes"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctr"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()] "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #") "
0 0 14 3 3 #"ctr"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-homes"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctr"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"assign-homes"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 6 #"))))] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 6 #"))))] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 6 #"))))] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"v2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 6 #"))))] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 5 #"alist"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 5 #")))] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"r1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"r2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"callq"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"fn"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 28 3 1 #","
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 28 3 1 #","
0 0 14 3 6 #"instrs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 10 #"alloc-size"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"map-me"
0 0 24 3 2 #" ("
0 0 14 3 12 #"assign-homes"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-homes"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 21 3 2 #"-8"
0 0 24 3 3 #")) "
0 0 14 3 6 #"instrs"
0 0 24 3 8 #")))]))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"patch-instructions"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"rax"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                   "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"rax"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"rax"
0 0 24 3 3 #")) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 14 3 3 #"rax"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 5 #")))] "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"instrs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 24 3 1 #"("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 6 #"map-me"
0 0 24 3 1 #" "
0 0 14 3 18 #"patch-instructions"
0 0 24 3 1 #" "
0 0 14 3 6 #"instrs"
0 0 24 3 6 #")))]  "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    )) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"intro"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"system-type"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 14 3 6 #"macosx"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 79
(
 #"\"\\t.globl _main\\n_main:\\n\\tpushq %rbp\\n\\tmovq %rsp, %rbp\\n\\"
 #"tsubq $~a, %rsp\\n\\n\""
) 0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 77
(
 #"\"\\t.globl main\\nmain:\\n\\tpushq %rbp\\n\\tmovq %rsp, %rbp\\n\\ts"
 #"ubq $~a, %rsp\\n\\n\""
) 0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"conclusion"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"system-type"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 14 3 6 #"macosx"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 97
(
 #"\"\\n\\tmovq %rax, %rdi\\n\\tcallq _print_int\\n\\taddq $~a, %rsp\\n"
 #"\\tmovq $0, %rax\\n\\tpopq %rbp\\n\\tretq\""
) 0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"system-type"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 14 3 7 #"windows"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 96
(
 #"\"\\n\\tmovq %rax, %rcx\\n\\tcallq "
 #"print_int\\n\\taddq $~a, %rsp\\n\\tmovq $0, %rax\\n\\tpopq %rbp\\n\\"
 #"tretq\""
) 0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 96
(
 #"\"\\n\\tmovq %rax, %rdi\\n\\tcallq "
 #"print_int\\n\\taddq $~a, %rsp\\n\\tmovq $0, %rax\\n\\tpopq %rbp\\n\\"
 #"tretq\""
) 0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"print-x86"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"\\taddq ~a(%rbp), ~a(%rbp)\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\taddq $~a, ~a(%rbp)\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"\\taddq $~a, $~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"addq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\taddq %~a, ~a(%rbp)\\n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"negq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"\\tnegq ~a(%rbp)\\n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"n2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\tmovq $~a, ~a(%rbp)\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"n1"
0 0 24 3 1 #" "
0 0 14 3 2 #"n2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\tmovq ~a(%rbp), %~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"rbp"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"\\tmovq %~a, ~a(%rbp)\\n\""
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 4 #"movq"
0 0 24 3 2 #" ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"r1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"reg"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"r2"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"\\tmovq %~a, %~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"r1"
0 0 24 3 1 #" "
0 0 14 3 2 #"r2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"callq"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"fn"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"system-type"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 14 3 6 #"macosx"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"\\tcallq _~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 3 #") ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"callq ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 2 #"fn"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 6 #"instrs"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 5 #"intro"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 5 #"foldr"
0 0 24 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"print-x86"
0 0 24 3 1 #" "
0 0 14 3 6 #"instrs"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"conclusion"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; Define the passes to be used by interp-tests and the grader"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; Note that your compiler file (or whatever file provides your pass"
 #"es)"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #";; should be named \"compiler.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"r0-passes"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 9 #"\"flipper\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flipper"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"pe-arith-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"uniquify-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"flatten-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 9 #"\"flatten\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"interp-C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"select-instructions-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 9 #"\"flatten\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"interp-C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 21 #"\"select-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"assign-homes-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 9 #"\"flatten\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"interp-C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 21 #"\"select-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 14 #"\"assign-homes\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"assign-homes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"patch-instructions-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 9 #"\"flatten\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"interp-C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 21 #"\"select-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 14 #"\"assign-homes\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"assign-homes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 20 #"\"patch-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"patch-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"print-x86-pass"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 19 #"\"partial evaluator\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"pe-arith"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 9 #"\"flatten\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"interp-C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 21 #"\"select-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 14 #"\"assign-homes\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"assign-homes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 20 #"\"patch-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"patch-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 11 #"\"print-x86\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"print-x86"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"r1-passes"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"`"
0 0 24 3 3 #"( ("
0 0 19 3 10 #"\"uniquify\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 8 #"uniquify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 13 #"interp-scheme"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 9 #"\"flatten\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 8 #"interp-C"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 21 #"\"select-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 19 #"select-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 14 #"\"assign-homes\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 24 3 1 #"("
0 0 14 3 12 #"assign-homes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 20 #"\"patch-instructions\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 18 #"patch-instructions"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 11 #"\"print-x86\""
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 9 #"print-x86"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 10 #"interp-x86"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ))"
0           0
